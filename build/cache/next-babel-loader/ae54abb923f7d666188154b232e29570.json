{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Component } from 'react';\nimport io from 'socket.io-client';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../components/Layout';\nimport MobileLayout from '../../components/MobileLayout';\nimport Details from '../../components/Details';\n\nvar Site = /*#__PURE__*/function (_Component) {\n  _inherits(Site, _Component);\n\n  var _super = _createSuper(Site);\n\n  function Site() {\n    var _this;\n\n    _classCallCheck(this, Site);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      companies: []\n    });\n\n    return _this;\n  }\n\n  _createClass(Site, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.isMobileView ? __jsx(MobileLayout, {\n        company_name: \"Doghouse Oil & Gas\",\n        site_name: \"Anchor Battery\"\n      }, this.props.equipment.map(function (equip) {\n        return __jsx(Details, {\n          key: equip.id,\n          name: equip.name,\n          currentValue: equip.currentLevel,\n          totalValue: equip.totalLevel,\n          alarmOn: equip.on_level,\n          alarmOff: equip.off_level,\n          mon: equip.monValue,\n          tue: equip.tueValue,\n          wed: equip.wedValue,\n          thu: equip.thuValue,\n          fri: equip.friValue,\n          sat: equip.satValue,\n          sun: equip.sunValue\n        });\n      })) : __jsx(Layout, {\n        company_name: \"Doghouse Oil & Gas\",\n        site_name: \"Anchor Battery\"\n      }, this.props.equipment.map(function (equip) {\n        return __jsx(Details, {\n          key: equip.id,\n          name: equip.name,\n          currentValue: equip.currentLevel,\n          totalValue: equip.totalLevel,\n          alarmOn: equip.on_level,\n          alarmOff: equip.off_level,\n          mon: equip.monValue,\n          tue: equip.tueValue,\n          wed: equip.wedValue,\n          thu: equip.thuValue,\n          fri: equip.friValue,\n          sat: equip.satValue,\n          sun: equip.sunValue\n        });\n      }));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(ctx) {\n      var _ctx$query, name, site, res;\n\n      return _regeneratorRuntime.async(function getInitialProps$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ctx$query = ctx.query, name = _ctx$query.name, site = _ctx$query.site;\n              console.log(name, site);\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(\"http://jctsystems.com/portal/test.asp\"));\n\n            case 4:\n              res = _context.sent;\n              // const json = await res.json();\n              console.log(res[4]); // let isMobileView = ctx.req.headers['user-agent'].search(/Android|iPhone/i)\n              // if(isMobileView < 0){\n              //   return {\n              //     isMobileView: false,\n              //     equipment: json[1]\n              //   }\n              // } else {\n              //   return {\n              //     isMobileView: true,\n              //     equipment: json[1]\n              //   }\n              // }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return Site;\n}(Component);\n\n_defineProperty(Site, \"defaultProps\", {\n  company: []\n});\n\nexport { Site as default };","map":null,"metadata":{},"sourceType":"module"}
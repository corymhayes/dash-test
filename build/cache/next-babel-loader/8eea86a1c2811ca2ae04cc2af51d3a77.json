{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\inetpub\\\\jctsystems\\\\portal\\\\jct-frontend\\\\components\\\\DoughnutChart.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Doughnut } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { color } from '../public/screensizes';\n\nvar DoughnutChart = function DoughnutChart(props) {\n  var data = {\n    datasets: [{\n      data: [props.currentValue, props.totalValue - props.currentValue],\n      // backgroundColor: [ color.jctOrange, 'rgba(0,0,0, .05)' ],\n      backgroundColor: function backgroundColor(ctx) {\n        // const i = ctx.dataIndex\n        if (ctx.dataset.data[0] < props.alarmOff) {\n          return ['lightgreen', 'rgba(0,0,0,.05)'];\n        } else if (ctx.dataset.data[0] > props.alarmOn) {\n          return ['red', 'rgba(0,0,0,.05)'];\n        } else {\n          return ['#ffcc00', 'rgba(0,0,0,.05)'];\n        }\n      },\n      borderWidth: 0\n    }]\n  };\n  return __jsx(GraphContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, __jsx(Graph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, __jsx(Doughnut, {\n    data: data,\n    width: 150,\n    height: 150,\n    options: {\n      cutoutPercentage: 80,\n      rotation: -1.25 * Math.PI,\n      circumference: 1.5 * Math.PI,\n      tooltips: false,\n      hover: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  })), __jsx(Volume, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(CurrentVolume, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, props.currentValue !== null ? props.currentValue.toFixed(2) : props.currentValue), __jsx(CurrentVolumeLabel, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, props.unitOfMeasure)));\n};\n\n_c = DoughnutChart;\nexport default DoughnutChart;\nvar GraphContainer = styled.div.withConfig({\n  displayName: \"DoughnutChart__GraphContainer\",\n  componentId: \"sc-557kc3-0\"\n})([\"display:grid;grid:1fr / 1fr;place-items:center;\"]);\n_c2 = GraphContainer;\nvar Graph = styled.div.withConfig({\n  displayName: \"DoughnutChart__Graph\",\n  componentId: \"sc-557kc3-1\"\n})([\"grid-row:1;grid-column:1;\"]);\n_c3 = Graph;\nvar Volume = styled.div.withConfig({\n  displayName: \"DoughnutChart__Volume\",\n  componentId: \"sc-557kc3-2\"\n})([\"grid-row:1;grid-column:1;display:flex;flex-flow:column;align-items:center;margin-top:1.5rem;\"]);\n_c4 = Volume;\nvar CurrentVolume = styled.div.withConfig({\n  displayName: \"DoughnutChart__CurrentVolume\",\n  componentId: \"sc-557kc3-3\"\n})([\"font-size:2.5rem;color:\", \";font-weight:bold;\"], color.jctDarkGray);\n_c5 = CurrentVolume;\nvar CurrentVolumeLabel = styled.div.withConfig({\n  displayName: \"DoughnutChart__CurrentVolumeLabel\",\n  componentId: \"sc-557kc3-4\"\n})([\"font-size:1.5rem;color:\", \";\"], color.jctLightGray);\n_c6 = CurrentVolumeLabel;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"DoughnutChart\");\n$RefreshReg$(_c2, \"GraphContainer\");\n$RefreshReg$(_c3, \"Graph\");\n$RefreshReg$(_c4, \"Volume\");\n$RefreshReg$(_c5, \"CurrentVolume\");\n$RefreshReg$(_c6, \"CurrentVolumeLabel\");","map":{"version":3,"sources":["C:/inetpub/jctsystems/portal/jct-frontend/components/DoughnutChart.js"],"names":["Doughnut","styled","color","DoughnutChart","props","data","datasets","currentValue","totalValue","backgroundColor","ctx","dataset","alarmOff","alarmOn","borderWidth","cutoutPercentage","rotation","Math","PI","circumference","tooltips","hover","toFixed","unitOfMeasure","GraphContainer","div","Graph","Volume","CurrentVolume","jctDarkGray","CurrentVolumeLabel","jctLightGray"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,iBAAzB;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,uBAAtB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAE7B,MAAMC,IAAI,GAAG;AACXC,IAAAA,QAAQ,EAAE,CAAC;AACTD,MAAAA,IAAI,EAAE,CAACD,KAAK,CAACG,YAAP,EAAsBH,KAAK,CAACI,UAAN,GAAmBJ,KAAK,CAACG,YAA/C,CADG;AAET;AACAE,MAAAA,eAAe,EAAE,yBAACC,GAAD,EAAS;AACxB;AACA,YAAGA,GAAG,CAACC,OAAJ,CAAYN,IAAZ,CAAiB,CAAjB,IAAsBD,KAAK,CAACQ,QAA/B,EAAwC;AACxC,iBAAO,CAAE,YAAF,EAAgB,iBAAhB,CAAP;AACD,SAFC,MAEK,IAAGF,GAAG,CAACC,OAAJ,CAAYN,IAAZ,CAAiB,CAAjB,IAAsBD,KAAK,CAACS,OAA/B,EAAuC;AAC1C,iBAAO,CAAE,KAAF,EAAS,iBAAT,CAAP;AACD,SAFI,MAEE;AACL,iBAAO,CAAE,SAAF,EAAa,iBAAb,CAAP;AACD;AACF,OAZQ;AAaTC,MAAAA,WAAW,EAAE;AAbJ,KAAD;AADC,GAAb;AAkBA,SACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AACE,IAAA,IAAI,EAAGT,IADT;AAEE,IAAA,KAAK,EAAG,GAFV;AAGE,IAAA,MAAM,EAAG,GAHX;AAIE,IAAA,OAAO,EAAE;AACPU,MAAAA,gBAAgB,EAAE,EADX;AAEPC,MAAAA,QAAQ,EAAG,CAAC,IAAD,GAAQC,IAAI,CAACC,EAFjB;AAGPC,MAAAA,aAAa,EAAG,MAAMF,IAAI,CAACC,EAHpB;AAIPE,MAAAA,QAAQ,EAAE,KAJH;AAKPC,MAAAA,KAAK,EAAE;AALA,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAeE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBjB,KAAK,CAACG,YAAN,KAAuB,IAAvB,GAA8BH,KAAK,CAACG,YAAN,CAAmBe,OAAnB,CAA2B,CAA3B,CAA9B,GAA8DlB,KAAK,CAACG,YAArF,CADF,EAEE,MAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBH,KAAK,CAACmB,aAA3B,CAFF,CAfF,CADF;AAsBD,CA1CD;;KAAMpB,a;AA4CN,eAAeA,aAAf;AAGA,IAAMqB,cAAc,GAAGvB,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,uDAApB;MAAMD,c;AAMN,IAAME,KAAK,GAAGzB,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,iCAAX;MAAMC,K;AAKN,IAAMC,MAAM,GAAG1B,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,oGAAZ;MAAME,M;AASN,IAAMC,aAAa,GAAG3B,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,sDAERvB,KAAK,CAAC2B,WAFE,CAAnB;MAAMD,a;AAMN,IAAME,kBAAkB,GAAG7B,MAAM,CAACwB,GAAV;AAAA;AAAA;AAAA,qCAEbvB,KAAK,CAAC6B,YAFO,CAAxB;MAAMD,kB","sourcesContent":["import { Doughnut } from 'react-chartjs-2'\r\n\r\nimport styled from 'styled-components'\r\nimport { color } from '../public/screensizes'\r\n\r\n\r\nconst DoughnutChart = props => {\r\n  \r\n  const data = {\r\n    datasets: [{\r\n      data: [props.currentValue, (props.totalValue - props.currentValue)],\r\n      // backgroundColor: [ color.jctOrange, 'rgba(0,0,0, .05)' ],\r\n      backgroundColor: (ctx) => {\r\n        // const i = ctx.dataIndex\r\n        if(ctx.dataset.data[0] < props.alarmOff){\r\n        return [ 'lightgreen', 'rgba(0,0,0,.05)' ]\r\n      } else if(ctx.dataset.data[0] > props.alarmOn){\r\n          return [ 'red', 'rgba(0,0,0,.05)' ]\r\n        } else {\r\n          return [ '#ffcc00', 'rgba(0,0,0,.05)' ]\r\n        }\r\n      },\r\n      borderWidth: 0\r\n    }]\r\n  }\r\n\r\n  return (\r\n    <GraphContainer>\r\n      <Graph>\r\n        <Doughnut \r\n          data={ data }\r\n          width={ 150 }\r\n          height={ 150 }\r\n          options={{ \r\n            cutoutPercentage: 80, \r\n            rotation: (-1.25 * Math.PI),\r\n            circumference: (1.5 * Math.PI),\r\n            tooltips: false,\r\n            hover: false\r\n          }}\r\n        />\r\n      </Graph>\r\n      <Volume>\r\n        <CurrentVolume>{ props.currentValue !== null ? props.currentValue.toFixed(2) : props.currentValue }</CurrentVolume>\r\n        <CurrentVolumeLabel>{props.unitOfMeasure}</CurrentVolumeLabel>\r\n      </Volume>\r\n    </GraphContainer>\r\n  )\r\n}\r\n\r\nexport default DoughnutChart    \r\n\r\n\r\nconst GraphContainer = styled.div`\r\n  display: grid;\r\n  grid: 1fr / 1fr;\r\n  place-items: center;\r\n`\r\n\r\nconst Graph = styled.div`\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n`\r\n\r\nconst Volume = styled.div`\r\n  grid-row: 1;\r\n  grid-column: 1;\r\n  display: flex;\r\n  flex-flow: column;\r\n  align-items: center;\r\n  margin-top: 1.5rem;\r\n`\r\n\r\nconst CurrentVolume = styled.div`\r\n  font-size: 2.5rem;\r\n  color: ${color.jctDarkGray};\r\n  font-weight: bold;\r\n`\r\n\r\nconst CurrentVolumeLabel = styled.div`\r\n  font-size: 1.5rem;\r\n  color: ${color.jctLightGray};\r\n`"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/cor-eee/Projects/jct-next/components/CompanyProvider.js\";\nvar __jsx = React.createElement;\nimport React, { useReducer, useContext } from 'react';\nconst CompanyStateContext = React.createContext();\nconst CompanySetStateContext = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET':\n      return state + action.payload;\n\n    case 'GET':\n      return state;\n\n    default:\n      throw new Error(`Unknown action: ${action.type}`);\n  }\n};\n\nexport const CompanyProvider = ({\n  children\n}) => {\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, []);\n  return __jsx(CompanySetStateContext.Provider, {\n    value: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, __jsx(CompanyStateContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, children));\n};\nexport const useCompany = () => useContext(CompanyListContext);\nexport const setCompany = () => useContext(CompanySetStateContext);","map":{"version":3,"sources":["/Users/cor-eee/Projects/jct-next/components/CompanyProvider.js"],"names":["React","useReducer","useContext","CompanyStateContext","createContext","CompanySetStateContext","reducer","state","action","type","payload","Error","CompanyProvider","children","dispatch","useCompany","CompanyListContext","setCompany"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AAEA,MAAMC,mBAAmB,GAAGH,KAAK,CAACI,aAAN,EAA5B;AACA,MAAMC,sBAAsB,GAAGL,KAAK,CAACI,aAAN,EAA/B;;AAEA,MAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAK,KAAL;AACE,aAAOF,KAAK,GAAGC,MAAM,CAACE,OAAtB;;AACF,SAAK,KAAL;AACE,aAAOH,KAAP;;AACF;AACE,YAAM,IAAII,KAAJ,CAAW,mBAAkBH,MAAM,CAACC,IAAK,EAAzC,CAAN;AANJ;AAQD,CATD;;AAWA,OAAO,MAAMG,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC/C,QAAM;AAAA,OAACN,KAAD;AAAA,OAAQO;AAAR,MAAoBb,UAAU,CAACK,OAAD,EAAU,EAAV,CAApC;AAEA,SACE,MAAC,sBAAD,CAAwB,QAAxB;AAAiC,IAAA,KAAK,EAAEQ,QAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,mBAAD,CAAqB,QAArB;AAA8B,IAAA,KAAK,EAAEP,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIM,QADJ,CADF,CADF;AAOD,CAVM;AAYP,OAAO,MAAME,UAAU,GAAG,MAAMb,UAAU,CAACc,kBAAD,CAAnC;AACP,OAAO,MAAMC,UAAU,GAAG,MAAMf,UAAU,CAACG,sBAAD,CAAnC","sourcesContent":["import React, { useReducer, useContext } from 'react'\n\nconst CompanyStateContext = React.createContext()\nconst CompanySetStateContext = React.createContext()\n\nconst reducer = (state, action) => {\n  switch(action.type){\n    case 'SET':\n      return state + action.payload\n    case 'GET':\n      return state\n    default:\n      throw new Error(`Unknown action: ${action.type}`)\n  }\n}\n\nexport const CompanyProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, [])\n\n  return(\n    <CompanySetStateContext.Provider value={dispatch}>\n      <CompanyStateContext.Provider value={state}>\n        { children }\n      </CompanyStateContext.Provider>\n    </CompanySetStateContext.Provider>\n  )\n}\n\nexport const useCompany = () => useContext(CompanyListContext)\nexport const setCompany = () => useContext(CompanySetStateContext)"]},"metadata":{},"sourceType":"module"}
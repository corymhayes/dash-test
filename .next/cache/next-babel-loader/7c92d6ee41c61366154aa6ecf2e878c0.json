{"ast":null,"code":"var _jsxFileName = \"/Users/cor-eee/Projects/jct-next/pages/_document.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheet, createGlobalStyle } from \"styled-components\";\nconst GlobalStyle = createGlobalStyle`\n  @font-face{\n    font-family: 'Industry';\n    src: url('/public/fonts/Industry-Bold.eot');\n    src: url('/public/fonts/Industry-Bold.eot?#iefix') format('embedded-opentype'),\n        url('/public/fonts/Industry-Bold.woff2') format('woff2'),\n        url('/public/fonts/Industry-Bold.woff') format('woff'),\n        url('/public/fonts/Industry-Bold.ttf') format('truetype'),\n        url('/public/fonts/Industry-Bold.svg#Industry-Bold') format('svg');\n    font-weight: bold;\n    font-style: normal;\n  }\n\n  @font-face{\n    font-family: 'Industry';\n    src: url('/public/fonts/Industry-Medium.eot');\n    src: url('/public/fonts/Industry-Medium.eot?#iefix') format('embedded-opentype'),\n        url('/public/fonts/Industry-Medium.woff2') format('woff2'),\n        url('/public/fonts/Industry-Medium.woff') format('woff'),\n        url('/public/fonts/Industry-Medium.ttf') format('truetype'),\n        url('/public/fonts/Industry-Medium.svg#Industry-Medium') format('svg');\n    font-weight: 500;\n    font-style: normal;\n  }\n`;\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n\n    try {\n      ctx.renderPage = () => originalRenderPage({\n        enhanceApp: App => props => sheet.collectStyles(__jsx(App, _extends({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 59\n          }\n        })))\n      });\n\n      const initialProps = await Document.getInitialProps(ctx);\n      return _objectSpread({}, initialProps, {\n        styles: __jsx(React.Fragment, null, initialProps.styles, sheet.getStyleElement())\n      });\n    } finally {\n      sheet.seal();\n    }\n  }\n\n  render() {\n    return __jsx(Html, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, __jsx(\"meta\", {\n      charSet: \"utf-8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      name: \"viewport\",\n      content: \"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    })), __jsx(\"body\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, __jsx(GlobalStyle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), __jsx(Main, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }), __jsx(NextScript, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/cor-eee/Projects/jct-next/pages/_document.js"],"names":["Document","Html","Head","Main","NextScript","ServerStyleSheet","createGlobalStyle","GlobalStyle","MyDocument","getInitialProps","ctx","sheet","originalRenderPage","renderPage","enhanceApp","App","props","collectStyles","initialProps","styles","getStyleElement","seal","render"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,QAAP,IAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,eAAvD;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,QAAoD,mBAApD;AAEA,MAAMC,WAAW,GAAGD,iBAAkB;;;;;;;;;;;;;;;;;;;;;;;;CAAtC;AA0BA,eAAe,MAAME,UAAN,SAAyBR,QAAzB,CAAkC;AAC/C,eAAaS,eAAb,CAA6BC,GAA7B,EAAkC;AAChC,UAAMC,KAAK,GAAG,IAAIN,gBAAJ,EAAd;AACA,UAAMO,kBAAkB,GAAGF,GAAG,CAACG,UAA/B;;AACA,QAAI;AACFH,MAAAA,GAAG,CAACG,UAAJ,GAAiB,MACfD,kBAAkB,CAAC;AACjBE,QAAAA,UAAU,EAAEC,GAAG,IAAIC,KAAK,IAAIL,KAAK,CAACM,aAAN,CAAoB,MAAC,GAAD,eAASD,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAApB;AADX,OAAD,CADpB;;AAIA,YAAME,YAAY,GAAG,MAAMlB,QAAQ,CAACS,eAAT,CAAyBC,GAAzB,CAA3B;AAEA,+BACKQ,YADL;AAEEC,QAAAA,MAAM,EACJ,4BACGD,YAAY,CAACC,MADhB,EAEGR,KAAK,CAACS,eAAN,EAFH;AAHJ;AASD,KAhBD,SAgBU;AACRT,MAAAA,KAAK,CAACU,IAAN;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,OAAO,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AACE,MAAA,IAAI,EAAC,UADP;AAEE,MAAA,OAAO,EAAC,wEAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CARF,CADF;AAgBD;;AA1C8C","sourcesContent":["import Document, { Html, Head, Main, NextScript } from \"next/document\";\nimport { ServerStyleSheet, createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  @font-face{\n    font-family: 'Industry';\n    src: url('/public/fonts/Industry-Bold.eot');\n    src: url('/public/fonts/Industry-Bold.eot?#iefix') format('embedded-opentype'),\n        url('/public/fonts/Industry-Bold.woff2') format('woff2'),\n        url('/public/fonts/Industry-Bold.woff') format('woff'),\n        url('/public/fonts/Industry-Bold.ttf') format('truetype'),\n        url('/public/fonts/Industry-Bold.svg#Industry-Bold') format('svg');\n    font-weight: bold;\n    font-style: normal;\n  }\n\n  @font-face{\n    font-family: 'Industry';\n    src: url('/public/fonts/Industry-Medium.eot');\n    src: url('/public/fonts/Industry-Medium.eot?#iefix') format('embedded-opentype'),\n        url('/public/fonts/Industry-Medium.woff2') format('woff2'),\n        url('/public/fonts/Industry-Medium.woff') format('woff'),\n        url('/public/fonts/Industry-Medium.ttf') format('truetype'),\n        url('/public/fonts/Industry-Medium.svg#Industry-Medium') format('svg');\n    font-weight: 500;\n    font-style: normal;\n  }\n`\n\nexport default class MyDocument extends Document {\n  static async getInitialProps(ctx) {\n    const sheet = new ServerStyleSheet();\n    const originalRenderPage = ctx.renderPage;\n    try {\n      ctx.renderPage = () =>\n        originalRenderPage({\n          enhanceApp: App => props => sheet.collectStyles(<App {...props} />)\n        });\n      const initialProps = await Document.getInitialProps(ctx);\n\n      return {\n        ...initialProps,\n        styles: (\n          <>\n            {initialProps.styles}\n            {sheet.getStyleElement()}\n          </>\n        )\n      };\n    } finally {\n      sheet.seal();\n    }\n  }\n\n  render() {\n    return(\n      <Html>\n        <Head>\n          <meta charSet=\"utf-8\" />\n          <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=0\"\n          />\n        </Head>\n        <body>\n          <GlobalStyle />\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}